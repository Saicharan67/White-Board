[{"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\reportWebVitals.js":"1","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\App.js":"2","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\Components\\Main\\Main.js":"3","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\index.js":"4"},{"size":362,"mtime":1610716126631,"results":"5","hashOfConfig":"6"},{"size":118,"mtime":1610717690156,"results":"7","hashOfConfig":"6"},{"size":9993,"mtime":1612104210552,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1610716126631,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1rl9plu",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\reportWebVitals.js",[],["20","21"],"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\App.js",[],"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\Components\\Main\\Main.js",["22","23","24","25","26","27","28"],"\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport  './style.css'\r\nimport $ from 'jquery'\r\nconst Board = props => {\r\n    const Colors = ['black','blue','red','green','yellow']\r\n    let canvas,ctx,features1\r\n    const [drawing , setdrawing] = useState(false) \r\n    const [color ,setcolor] = useState('black')\r\n    const [eraserlinewidth,seteraserlinewidht]=useState('10')\r\n    const [linewidth,setlinewidth] = useState(2)\r\n   \r\n    const [state,setstate] = useState('pencil')\r\n    const fixHeight = (canvas) =>{\r\n        canvas.height = window.innerHeight-5;\r\n        canvas.width = window.innerWidth-5\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        features1 = document.getElementsByClassName(\"penciloptions\")[0].style;\r\n       \r\n        canvas = document.getElementsByClassName(\"canvas\")[0];\r\n        ctx  = canvas.getContext('2d')\r\n        \r\n        window.addEventListener('load',()=>{\r\n         fixHeight(canvas)\r\n        })\r\n        window.addEventListener('resize',()=>{\r\n            fixHeight(canvas)\r\n        })\r\n\r\n        \r\n            // var tool;\r\n            // var canvas = document.getElementsByClassName(\"canvas\")[0];\r\n            // var ctx = canvas.getContext('2d');\r\n            \r\n            // var history = {\r\n            //   redo_list: [],\r\n            //   undo_list: [],\r\n            //   saveState: function(canvas, list, keep_redo) {\r\n            //     keep_redo = keep_redo || false;\r\n            //     if(!keep_redo) {\r\n            //       this.redo_list = [];\r\n            //     }\r\n                \r\n            //     (list || this.undo_list).push(canvas.toDataURL());   \r\n            //   },\r\n            //   undo: function(canvas, ctx) {\r\n            //     this.restoreState(canvas, ctx, this.undo_list, this.redo_list);\r\n            //   },\r\n            //   redo: function(canvas, ctx) {\r\n            //     this.restoreState(canvas, ctx, this.redo_list, this.undo_list);\r\n            //   },\r\n            //   restoreState: function(canvas, ctx,  pop, push) {\r\n            //     if(pop.length) {\r\n            //       this.saveState(canvas, push, true);\r\n            //       var restore_state = pop.pop();\r\n            //       var img = new Element('img', {'src':restore_state});\r\n            //       img.onload = function() {\r\n            //         ctx.clearRect(0, 0, 600, 400);\r\n            //         ctx.drawImage(img, 0, 0, 600, 400, 0, 0, 600, 400);  \r\n            //       }\r\n            //     }\r\n            //   }\r\n            // }\r\n            \r\n            // var pencil = {\r\n            //   options: {\r\n            //     stroke_color: ['00', '00', '00'],\r\n            //     dim: 4\r\n            //   },\r\n            //   init: function(canvas, ctx) {\r\n            //     this.canvas = canvas;\r\n            //     this.canvas_coords = this.canvas.getCoordinates();\r\n            //     this.ctx = ctx;\r\n            //     this.ctx.strokeColor = this.options.stroke_color;\r\n            //     this.drawing = false;\r\n            //     this.addCanvasEvents();\r\n            //   },\r\n            //   addCanvasEvents: function() {\r\n            //     this.canvas.addEvent('mousedown', this.start.bind(this));\r\n            //     this.canvas.addEvent('mousemove', this.stroke.bind(this));\r\n            //     this.canvas.addEvent('mouseup', this.stop.bind(this));\r\n            //     this.canvas.addEvent('mouseout', this.stop.bind(this));\r\n            //   },\r\n            //   start: function(evt) {\r\n            //     var x = evt.page.x - this.canvas_coords.left;\r\n            //     var y = evt.page.y - this.canvas_coords.top;\r\n            //     this.ctx.beginPath();\r\n            //     this.ctx.moveTo(x, y);\r\n            //     history.saveState(this.canvas);\r\n            //     this.drawing = true;\r\n            //   },\r\n            //   stroke: function(evt) {\r\n            //     if(this.drawing) {\r\n            //       var x = evt.page.x - this.canvas_coords.left;\r\n            //       var y = evt.page.y - this.canvas_coords.top;\r\n            //       this.ctx.lineTo(x, y);\r\n            //       this.ctx.stroke();\r\n                  \r\n            //     }\r\n            //   },\r\n            //   stop: function(evt) {\r\n            //     if(this.drawing) this.drawing = false;\r\n            //   }\r\n            // };\r\n            \r\n            // document.getElementById('pencil').addEventListener('click', function() {\r\n            //   pencil.init(canvas, ctx);\r\n            // });\r\n            \r\n            // document.getElementById('undo').addEventListener('click', function() {\r\n            //   history.undo(canvas, ctx);\r\n            // });\r\n            \r\n            // document.getElementById('redo').addEventListener('click', function() {\r\n            //   history.redo(canvas, ctx);\r\n            // });\r\n          \r\n            \r\n          \r\n    })\r\n    \r\n    const startDrawing = (e) => {\r\n       \r\n        setdrawing(true)\r\n        draw(e)\r\n       \r\n    }\r\n    const finishDrawing = () => {\r\n        setdrawing(false)\r\n        ctx.beginPath()\r\n    }\r\n    const draw = (e) => {\r\n    \r\n       if(!drawing) return;\r\n       ctx.lineWidth = state!='pencil'?eraserlinewidth:linewidth;\r\n       ctx.lineCap = 'round'\r\n       ctx.strokeStyle=state!='pencil'?'white':color\r\n       ctx.lineTo(e.clientX,e.clientY)\r\n       ctx.stroke()\r\n       ctx.beginPath()\r\n       ctx.moveTo(e.clientX,e.clientY)\r\n    \r\n   }\r\n   const erase = (e) => {\r\n    setstate('erase')\r\n    document.getElementsByClassName(\"canvas\")[0].style.cursor = \"pointer\"\r\n   \r\n    \r\n    \r\n    \r\n    \r\n    \r\n   }\r\n   const pencil = (e) => {\r\n    setstate('pencil')\r\n    document.getElementsByClassName(\"canvas\")[0].style.cursor = \"crosshair\"\r\n\r\n    \r\n   }\r\n   const rectangle = () => {\r\n    setstate('pencil')\r\n    let xPlace=100;\r\n    let yPlace=130;\r\n    document.getElementsByClassName('canvas')[0].addEventListener('click',(event)=>{\r\n        xPlace = event.clientX\r\n        yPlace = event.clientY\r\n        ctx.beginPath();\r\n        ctx.lineWidth = linewidth;\r\n        ctx.strokeStyle = color;\r\n        ctx.rect(xPlace, yPlace, 300, 150);\r\n        ctx.stroke();\r\n        ctx.beginPath();\r\n       \r\n      \r\n},{once:true})\r\n   }\r\n   const square = () => {\r\n    setstate('pencil')\r\n    let xPlace=100;\r\n    let yPlace=130;\r\n    document.getElementsByClassName('canvas')[0].addEventListener('click',(event)=>{\r\n        xPlace = event.clientX\r\n        yPlace = event.clientY\r\n        ctx.beginPath();\r\n        ctx.lineWidth = linewidth;\r\n        ctx.strokeStyle = color;\r\n        ctx.rect(xPlace, yPlace, 200, 200);\r\n        ctx.stroke();\r\n        ctx.beginPath();\r\n       \r\n      \r\n},{once:true})\r\n   \r\n   }\r\n   const Circle = () => {\r\n    setstate('pencil')\r\n    let xPlace=100;\r\n    let yPlace=130;\r\n    document.getElementsByClassName('canvas')[0].addEventListener('click',(event)=>{\r\n                    xPlace = event.clientX\r\n                    yPlace = event.clientY\r\n                    console.log(xPlace,yPlace)\r\n                    ctx.beginPath();\r\n                    ctx.lineWidth = linewidth;\r\n                    ctx.strokeStyle = color;\r\n                    ctx.arc(xPlace, yPlace, 200, 0, 2 * Math.PI, false);\r\n                    ctx.stroke();\r\n                    ctx.beginPath();\r\n                    \r\n    },{once:true})\r\n    \r\n   }\r\n\r\n   const chooseColor = (clr) => {\r\n       \r\n        setcolor(clr)\r\n        \r\n      \r\n   } \r\n   const setline = (e) => {\r\n      \r\n       setlinewidth(e.target.value)\r\n      \r\n   } \r\n   const seteraserline = (e) => {\r\n       seteraserlinewidht(e.target.value)\r\n   }\r\n\r\n    \r\n   \r\n    \r\n   \r\n    return(\r\n        \r\n         <div className='root'>\r\n           \r\n            <div>\r\n                <div  className='sidebar'>\r\n                   <button className = 'eraser' onClick={erase}>\r\n                       Earser\r\n                   </button>\r\n                   <button className = 'eraser' id=\"pencil\" onClick={pencil}>\r\n                      pencil\r\n                   </button>\r\n                   <button className = 'eraser' id=\"undo\" >\r\n                      undo\r\n                   </button>\r\n                   <button className = 'eraser' id=\"redo\">\r\n                      redo\r\n                   </button>\r\n                   <button className = 'eraser' onClick={rectangle}>\r\n                      rectangle\r\n                   </button>\r\n                   <button className = 'eraser' onClick={square}>\r\n                      square\r\n                   </button>\r\n                    <button className = 'eraser' onClick={Circle}>\r\n                    Circle\r\n                   </button>\r\n                   \r\n                   \r\n                </div>\r\n                <div className=\"penciloptions\">\r\n                 <div>\r\n                 {Colors.map((clr)=>{\r\n                      return(\r\n                        <button key={clr} className = 'eraser' onClick={()=>chooseColor(clr)}>\r\n                        {clr}\r\n                     </button>\r\n                      )\r\n                  })}\r\n                 </div>\r\n                 <h4>Pencil Size</h4>\r\n                 <div>\r\n                     <input type=\"range\" min=\"1\" max = \"10\" defaultValue={linewidth} value={linewidth} onChange={setline}></input>\r\n                 </div>\r\n                 <h4>Eraser Size</h4>\r\n                 <div>\r\n                     <input type=\"range\" min=\"3\" max = \"50\" defaultValue={eraserlinewidth} value={eraserlinewidth} onChange={seteraserline}></input>\r\n                 </div>\r\n                 \r\n               </div>\r\n\r\n            </div>\r\n               \r\n          \r\n            \r\n            <div>\r\n\r\n            <canvas className=\"canvas\"\r\n            onMouseDown={startDrawing}\r\n            onMouseUp={finishDrawing}\r\n            onMouseMove={draw}\r\n            >  </canvas>\r\n            </div>\r\n                \r\n                \r\n\r\n              \r\n\r\n\r\n\r\n     </div>\r\n               \r\n               \r\n\r\n       \r\n    )\r\n}\r\n\r\nexport default Board","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\index.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":5,"column":8,"nodeType":"35","messageId":"36","endLine":5,"endColumn":9},{"ruleId":"33","severity":1,"message":"37","line":21,"column":9,"nodeType":"35","messageId":"36","endLine":21,"endColumn":18},{"ruleId":"38","severity":1,"message":"39","line":21,"column":21,"nodeType":"40","endLine":21,"endColumn":78},{"ruleId":"38","severity":1,"message":"41","line":23,"column":18,"nodeType":"40","endLine":23,"endColumn":62},{"ruleId":"38","severity":1,"message":"42","line":24,"column":16,"nodeType":"43","endLine":24,"endColumn":39},{"ruleId":"44","severity":1,"message":"45","line":138,"column":29,"nodeType":"46","messageId":"47","endLine":138,"endColumn":31},{"ruleId":"44","severity":1,"message":"45","line":140,"column":29,"nodeType":"46","messageId":"47","endLine":140,"endColumn":31},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'features1' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'features1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'canvas' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'ctx' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]