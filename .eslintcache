[{"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\reportWebVitals.js":"1","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\App.js":"2","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\Components\\Main\\Main.js":"3","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\index.js":"4","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\Components\\Features\\pages\\Newpages.js":"5"},{"size":362,"mtime":1610716126631,"results":"6","hashOfConfig":"7"},{"size":118,"mtime":1610717690156,"results":"8","hashOfConfig":"7"},{"size":10485,"mtime":1614265686739,"results":"9","hashOfConfig":"7"},{"size":500,"mtime":1610716126631,"results":"10","hashOfConfig":"7"},{"size":4464,"mtime":1614186695140,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1rl9plu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\reportWebVitals.js",[],["25","26"],"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\App.js",[],"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\Components\\Main\\Main.js",["27","28","29","30","31","32","33","34","35"],"import React, { useEffect, useState } from 'react';\r\nimport  './style.css'\r\nimport NewPages from '../Features/pages/Newpages.js'\r\n\r\nconst Board = () => {\r\n    const Colors = ['black','blue','red','green','yellow']\r\n    const [drawing , setdrawing] = useState(false) \r\n    const [color ,setcolor] = useState('black')\r\n    const [eraserlinewidth,seteraserlinewidht]=useState('10')\r\n    const [linewidth,setlinewidth] = useState(2)\r\n    const [redo_list,set_redo] = useState([])\r\n    const [undo_list,set_undo] = useState([])\r\n    const [flag,setflag] = useState(0)\r\n    const [state,setstate] = useState('pencil')\r\n    let  canvas ;\r\n    let ctx ;\r\n    const fixHeight = (canvas) =>{\r\n        canvas.height = window.innerHeight-5;\r\n        canvas.width = window.innerWidth-5\r\n    }\r\n    useEffect(()=>{\r\n       \r\n        canvas = document.getElementsByClassName(\"canvas\")[0];\r\n        ctx  = canvas.getContext('2d')\r\n     \r\n    })\r\n    useEffect(()=>{\r\n        window.addEventListener('load',()=>{\r\n            console.log(JSON.parse(localStorage.getItem(\"Pages\"))?JSON.parse(localStorage.getItem(\"Pages\")).length:'notcame')\r\n            fixHeight(canvas)\r\n            if(JSON.parse(localStorage.getItem(\"Pages\"))){\r\n            var prevState = JSON.parse(localStorage.getItem(\"Pages\"));\r\n            var imageObj = new Image();\r\n            imageObj.src = prevState[0]\r\n            console.log(prevState[0])\r\n            imageObj.onload = function() {\r\n             ctx.clearRect(0, 0, 1900, 1000);\r\n             ctx.drawImage(imageObj,0,0,1900, 1000, 0, 0, 1900, 1000);\r\n             }\r\n            set_redo([])\r\n            set_undo([])\r\n            setflag(1)\r\n            }\r\n            \r\n           })\r\n        window.addEventListener('resize',()=>{\r\n            fixHeight(canvas)\r\n            window.location.reload()\r\n           })\r\n        window.addEventListener('keydown',function(event){\r\n             if( event.key=='z' && event.ctrlKey){\r\n             console.log('came')\r\n              undo(canvas,ctx)\r\n             }\r\n        })\r\n\r\n    },[])\r\n  \r\n\r\n    const saveState = (canvas , list ,keep_redo) => {\r\n        keep_redo = keep_redo || false;\r\n        if(!keep_redo) {\r\n          set_redo([]);\r\n        }       \r\n        if (list){\r\n               if (list.name=='undo'){\r\n                  set_undo(undo_list=>[...undo_list,canvas.toDataURL()]) \r\n               }\r\n               else{\r\n                  set_redo(redo_list=>[...redo_list,canvas.toDataURL()]) \r\n               }\r\n        }\r\n        else{         \r\n          set_undo(undo_list=>[...undo_list,canvas.toDataURL()])       \r\n      }     \r\n      console.log(undo_list.length,redo_list.length)\r\n    }\r\n\r\n    const undo = (canvas , ctx) => {\r\n       \r\n        restoreState(canvas, ctx, {name:'undo',list:undo_list}, {name:'redo',list:redo_list});\r\n        \r\n    }\r\n   \r\n\r\n\r\n    const redo = (canvas , ctx) => {\r\n        restoreState(canvas, ctx,  {name:'redo',list:redo_list},{name:'undo',list:undo_list});\r\n\r\n    }\r\n\r\n    const restoreState = (canvas, ctx,  poping, pushing) => {\r\n\r\n        if(poping.list.length) {\r\n            \r\n            saveState(canvas, pushing, true);\r\n           \r\n            var restore_state = poping.list.pop();\r\n       \r\n            var temp_list = poping.list\r\n            if(poping.name=='undo'){\r\n                set_undo([...temp_list]) \r\n            }\r\n            else{\r\n                set_redo([...temp_list])  \r\n            }\r\n            var imageObj1 = new Image();\r\n            imageObj1.src = restore_state\r\n            imageObj1.onload = function() {\r\n             ctx.clearRect(0, 0, 1900, 1000);\r\n             ctx.drawImage(imageObj1,0,0,1900, 1000, 0, 0, 1900, 1000);\r\n            \r\n             }\r\n\r\n        }\r\n    }\r\n    const draw = (e) => {\r\n    \r\n        if(!drawing) return;\r\n        canvas = document.getElementsByClassName(\"canvas\")[0];\r\n        ctx  = canvas.getContext('2d')\r\n        ctx.lineWidth = state!='pencil'?eraserlinewidth:linewidth;\r\n        ctx.lineCap = 'round'\r\n        ctx.strokeStyle=state!='pencil'?'white':color\r\n        ctx.lineTo(e.clientX+1,e.clientY)\r\n        ctx.stroke()\r\n        ctx.beginPath()\r\n        ctx.moveTo(e.clientX,e.clientY)\r\n     \r\n    }\r\n\r\n    const startDrawing = (evt) => {\r\n       \r\n        setdrawing(true)\r\n        saveState(canvas);\r\n        console.log(canvas)\r\n        localStorage.setItem(\"undo_list\", JSON.stringify(undo_list));\r\n        draw(evt)\r\n       \r\n    \r\n    }\r\n    const finishDrawing = () => {\r\n        setdrawing(false)\r\n        ctx.beginPath()\r\n       // localStorage.setItem(\"Canvas\", JSON.stringify([canvas.toDataURL()]));\r\n        \r\n    }\r\n    \r\n   const erase = (e) => {\r\n    setstate('erase')\r\n    document.getElementsByClassName(\"canvas\")[0].style.cursor = \"pointer\"\r\n   \r\n   }\r\n   const pencil = (e) => {\r\n    setstate('pencil')\r\n    document.getElementsByClassName(\"canvas\")[0].style.cursor = \"crosshair\"\r\n\r\n   }\r\n   const rectangle = () => {\r\n    setstate('pencil')\r\n    let xPlace=100;\r\n    let yPlace=130;\r\n    document.getElementsByClassName('canvas')[0].addEventListener('click',(event)=>{\r\n        xPlace = event.clientX\r\n        yPlace = event.clientY\r\n        ctx.beginPath();\r\n        ctx.lineWidth = linewidth;\r\n        ctx.strokeStyle = color;\r\n        ctx.rect(xPlace, yPlace, 300, 150);\r\n        ctx.stroke();\r\n        ctx.beginPath();\r\n       \r\n      \r\n      },{once:true})\r\n   }\r\n   const square = () => {\r\n    setstate('pencil')\r\n    let xPlace=100;\r\n    let yPlace=130;\r\n    document.getElementsByClassName('canvas')[0].addEventListener('click',(event)=>{\r\n        xPlace = event.clientX\r\n        yPlace = event.clientY\r\n        ctx.beginPath();\r\n        ctx.lineWidth = linewidth;\r\n        ctx.strokeStyle = color;\r\n        ctx.rect(xPlace, yPlace, 200, 200);\r\n        ctx.stroke();\r\n        ctx.beginPath();\r\n       \r\n      \r\n   },{once:true})\r\n   \r\n   }\r\n   const Circle = () => {\r\n    setstate('pencil')\r\n    let xPlace=100;\r\n    let yPlace=130;\r\n    document.getElementsByClassName('canvas')[0].addEventListener('click',(event)=>{\r\n                    xPlace = event.clientX\r\n                    yPlace = event.clientY\r\n              \r\n                    ctx.beginPath();\r\n                    ctx.lineWidth = linewidth;\r\n                    ctx.strokeStyle = color;\r\n                    ctx.arc(xPlace, yPlace, 200, 0, 2 * Math.PI, false);\r\n                    ctx.stroke();\r\n                    ctx.beginPath();\r\n                    \r\n    },{once:true})\r\n    \r\n   }\r\n\r\n   const chooseColor = (clr) => {\r\n         setcolor(clr)     \r\n   } \r\n\r\n   const setline = (e) => {     \r\n       setlinewidth(e.target.value)  \r\n   } \r\n\r\n   const seteraserline = (e) => {\r\n       seteraserlinewidht(e.target.value)\r\n   }\r\n\r\n   const callundo = ()=>{\r\n    undo(canvas, ctx);\r\n   }\r\n\r\n   const callredo = ()=>{\r\n    redo(canvas, ctx);\r\n   }\r\n\r\n   const clearRect = () => {\r\n    ctx.clearRect(0,0,1900,1000)\r\n    set_redo([])\r\n    set_undo([])\r\n   \r\n    //localStorage.setItem(\"Canvas\", JSON.stringify([canvas.toDataURL()]));\r\n   }\r\n\r\n   const download = () => {\r\n    var download = document.getElementsByClassName(\"download\")[0];\r\n    var image = canvas.toDataURL(\"image/png\")\r\n        .replace(\"image/png\", \"image/octet-stream\");\r\n        download.setAttribute(\"href\", image);   \r\n    }\r\n    \r\n    return(\r\n        \r\n         <div className='root'>\r\n            <div>\r\n                <div  className='sidebar'>\r\n                        <button className = 'eraser' onClick={erase}>\r\n                            Earser\r\n                        </button>\r\n                        <a className=\"download\" download=\"canvas.png\">\r\n                            <button className='eraser' type=\"button\" onClick={download}>Download</button>\r\n                            </a>\r\n                        <button className = 'eraser' id=\"pencil\" onClick={pencil}>\r\n                            pencil\r\n                        </button>\r\n                        <button className = 'eraser' id=\"undo\" onClick={callundo}>\r\n                            undo\r\n                        </button>\r\n                        <button className = 'eraser' id=\"redo\" onClick={callredo}>\r\n                            redo\r\n                        </button>\r\n                        <button className = 'eraser' id=\"redo\" onClick={clearRect}>\r\n                            Clear\r\n                        </button>\r\n                        <button className = 'eraser' onClick={rectangle}>\r\n                            rectangle\r\n                        </button>\r\n                        <button className = 'eraser' onClick={square}>\r\n                            square\r\n                        </button>\r\n                            <button className = 'eraser' onClick={Circle}>\r\n                            Circle\r\n                        </button>\r\n                   \r\n                   \r\n                </div>\r\n                <NewPages settingundo={set_undo} settingredo={set_redo}  drawingStatus={drawing}  flag={flag}/> \r\n                <div className=\"penciloptions\">\r\n                        <div>\r\n                                {Colors.map((clr)=>{\r\n                                    return(\r\n                                        <button key={clr} className = 'eraser' onClick={()=>chooseColor(clr)}>\r\n                                        {clr}\r\n                                    </button>\r\n                                    )\r\n                                })}\r\n                        </div>\r\n\r\n                        <h4>Pencil Size</h4>\r\n\r\n                        <div>\r\n                                <input type=\"range\" min=\"1\" max = \"10\" defaultValue={linewidth} value={linewidth} onChange={setline}></input>\r\n                        </div>\r\n\r\n                        <h4>Eraser Size</h4>\r\n\r\n                        <div>\r\n                                <input type=\"range\" min=\"3\" max = \"50\" defaultValue={eraserlinewidth} value={eraserlinewidth} onChange={seteraserline}></input>\r\n                        </div>\r\n                \r\n                </div>\r\n            </div>\r\n           \r\n            \r\n            \r\n            <div>\r\n\r\n            <canvas ref={canvas}  height={window.innerHeight-5} width={window.innerWidth-5} className=\"canvas\"  onMouseDown={startDrawing}   onMouseUp={finishDrawing}  onMouseMove={draw}> </canvas>\r\n     \r\n            </div>\r\n    \r\n     </div>\r\n               \r\n               \r\n\r\n       \r\n    )\r\n}\r\n\r\nexport default Board","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\index.js",[],"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\Components\\Features\\pages\\Newpages.js",["36","37","38","39","40","41","42","43","44","45"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport './style.css'\r\nconst NewPages = ({ settingundo,\r\n    settingredo,drawingStatus,flag})=>{\r\n   var canvas,ctx\r\n   const [currPage,setcurrPage] = useState(1)\r\n   const [totalpages,settotalpages] =useState(1)\r\n  \r\n\r\n\r\n   // useEffect to check previous storage exits and if then renders it\r\n   useEffect(()=>{\r\n    if(JSON.parse(localStorage.getItem(\"Pages\"))){\r\n        setcurrPage(1)\r\n        settotalpages( JSON.parse(localStorage.getItem(\"TotalPages\")))\r\n      \r\n      \r\n    }\r\n   },[])\r\n\r\n\r\n   // useEffect to listen to updates on totalpages\r\n   useEffect(()=>{\r\n     localStorage.setItem('TotalPages',JSON.stringify(totalpages))\r\n   },[totalpages])\r\n\r\n\r\n  // This effect shld certain to go to hell becoz iam gonna change this to useref\r\n   useEffect(()=>{\r\n    canvas = document.getElementsByClassName(\"canvas\")[0];\r\n    ctx  = canvas.getContext('2d')\r\n\r\n   })\r\n\r\n   //UseEffect for setting undo , redo lists to [] for every change in page\r\n   useEffect(()=>{\r\n      settingundo([])\r\n      settingredo([])\r\n   },[currPage])\r\n\r\n   // UseEffect to update the page for every change\r\n   useEffect(()=>{\r\n   \r\n     if(!drawingStatus && flag){\r\n       console.log(flag)\r\n       if(JSON.parse(localStorage.getItem(\"Pages\"))){\r\n        console.log('currpage',currPage)\r\n        var storedpages = JSON.parse(localStorage.getItem(\"Pages\"))\r\n        console.log(storedpages[0])\r\n    \r\n        storedpages[currPage-1]=canvas.toDataURL()\r\n    \r\n        localStorage.setItem(\"Pages\", JSON.stringify(storedpages))\r\n       }\r\n       else{\r\n        localStorage.setItem(\"Pages\", JSON.stringify([canvas.toDataURL()]));\r\n       }\r\n            \r\n     }\r\n    \r\n   \r\n   },[drawingStatus])\r\n  \r\n   // fnx to save the page \r\n   const savepage = () => {\r\n    var storedpages = JSON.parse(localStorage.getItem(\"Pages\"))\r\n    storedpages[currPage-1]=canvas.toDataURL()\r\n    localStorage.setItem(\"Pages\", JSON.stringify(storedpages))\r\n   }\r\n\r\n  // fnx to drawpage according to page number passed\r\n   const drawpage = (page) => {   \r\n    var storedpages = JSON.parse(localStorage.getItem(\"Pages\"))\r\n    var imageObj2 = new Image();\r\n    imageObj2.src = storedpages[page-1]\r\n    imageObj2.onload = function() {\r\n\r\n        ctx.clearRect(0, 0, 1900, 1000);\r\n        ctx.drawImage(imageObj2,0,0,1900, 1000, 0, 0, 1900, 1000);\r\n  \r\n     }\r\n\r\n   }\r\n\r\n   //fnx that excutes on prev page button clicks\r\n   const PrevPage = () => {\r\n    if(currPage==1)return;\r\n    savepage()\r\n    setcurrPage(currPage-1) \r\n    drawpage(currPage-1)\r\n  \r\n  }\r\n   \r\n  //fnx that excutes on next page button clicks\r\n   const NextPage = () => {\r\n       if (currPage==totalpages){\r\n           if(totalpages==1){\r\n           \r\n            localStorage.setItem(\"Pages\", JSON.stringify([canvas.toDataURL()]));\r\n            setcurrPage(currPage+1)\r\n            settotalpages(totalpages+1)\r\n            ctx.clearRect(0, 0, 1900, 1000);\r\n           }\r\n          else{\r\n            savepage()\r\n            ctx.clearRect(0, 0, 1900, 1000);\r\n            setcurrPage(currPage+1)\r\n            settotalpages(totalpages+1)\r\n            \r\n          }\r\n       }\r\n       else{\r\n           savepage()\r\n           setcurrPage(currPage+1)\r\n          \r\n            drawpage(currPage+1)\r\n      \r\n       }\r\n\r\n   }\r\n\r\n   // fnx to del the page \r\n   const DeletePage = () => {\r\n     console.log(currPage)\r\n     if(currPage==1){\r\n      NextPage()\r\n      setcurrPage(currPage=>currPage-1)\r\n      settotalpages(totalpages=>totalpages-1)\r\n      const [firstelement,...rest]= JSON.parse(localStorage.getItem(\"Pages\"))\r\n      // console.log(firstelement,rest)\r\n      localStorage.setItem(\"Pages\", JSON.stringify(rest))\r\n     }\r\n     else{\r\n       const TempPageNumber = currPage;\r\n       const storedpages = JSON.parse(localStorage.getItem(\"Pages\"));\r\n       PrevPage()\r\n       settotalpages(totalpages=>totalpages-1)\r\n       storedpages.pop(TempPageNumber-1)\r\n       localStorage.setItem(\"Pages\", JSON.stringify(storedpages))\r\n\r\n\r\n\r\n     }\r\n   }\r\n\r\n    return(\r\n        <div className='page'>\r\n            <button className='eraser' onClick={PrevPage}>prev</button>\r\n            <div className='pagebox'>\r\n                <span>{currPage}/{totalpages}</span>\r\n\r\n            </div>\r\n            <button className='eraser' onClick={NextPage}>next</button>\r\n            <button className='eraser' onClick={DeletePage}>Del</button>\r\n       </div>\r\n    )\r\n}\r\n \r\n\r\n\r\nexport default NewPages",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":23,"column":18,"nodeType":"52","endLine":23,"endColumn":62},{"ruleId":"50","severity":1,"message":"53","line":24,"column":16,"nodeType":"54","endLine":24,"endColumn":39},{"ruleId":"55","severity":1,"message":"56","line":51,"column":27,"nodeType":"57","messageId":"58","endLine":51,"endColumn":29},{"ruleId":"50","severity":1,"message":"59","line":57,"column":7,"nodeType":"60","endLine":57,"endColumn":9,"suggestions":"61"},{"ruleId":"55","severity":1,"message":"56","line":66,"column":29,"nodeType":"57","messageId":"58","endLine":66,"endColumn":31},{"ruleId":"55","severity":1,"message":"56","line":101,"column":27,"nodeType":"57","messageId":"58","endLine":101,"endColumn":29},{"ruleId":"55","severity":1,"message":"62","line":122,"column":30,"nodeType":"57","messageId":"58","endLine":122,"endColumn":32},{"ruleId":"55","severity":1,"message":"62","line":124,"column":30,"nodeType":"57","messageId":"58","endLine":124,"endColumn":32},{"ruleId":"63","severity":1,"message":"64","line":256,"column":25,"nodeType":"65","endLine":256,"endColumn":71},{"ruleId":"66","severity":1,"message":"67","line":1,"column":28,"nodeType":"68","messageId":"69","endLine":1,"endColumn":34},{"ruleId":"50","severity":1,"message":"51","line":30,"column":14,"nodeType":"52","endLine":30,"endColumn":58},{"ruleId":"50","severity":1,"message":"53","line":31,"column":12,"nodeType":"54","endLine":31,"endColumn":35},{"ruleId":"50","severity":1,"message":"70","line":39,"column":6,"nodeType":"60","endLine":39,"endColumn":16,"suggestions":"71"},{"ruleId":"50","severity":1,"message":"72","line":62,"column":6,"nodeType":"60","endLine":62,"endColumn":21,"suggestions":"73"},{"ruleId":"55","severity":1,"message":"56","line":87,"column":16,"nodeType":"57","messageId":"58","endLine":87,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":96,"column":20,"nodeType":"57","messageId":"58","endLine":96,"endColumn":22},{"ruleId":"55","severity":1,"message":"56","line":97,"column":25,"nodeType":"57","messageId":"58","endLine":97,"endColumn":27},{"ruleId":"55","severity":1,"message":"56","line":125,"column":17,"nodeType":"57","messageId":"58","endLine":125,"endColumn":19},{"ruleId":"66","severity":1,"message":"74","line":129,"column":14,"nodeType":"68","messageId":"69","endLine":129,"endColumn":26},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"react-hooks/exhaustive-deps","Assignments to the 'canvas' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'ctx' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'canvas', 'ctx', and 'undo'. Either include them or remove the dependency array.","ArrayExpression",["77"],"Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'settingredo' and 'settingundo'. Either include them or remove the dependency array. If 'settingundo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["78"],"React Hook useEffect has missing dependencies: 'canvas', 'currPage', and 'flag'. Either include them or remove the dependency array.",["79"],"'firstelement' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [canvas, ctx, undo]",{"range":"86","text":"87"},"Update the dependencies array to be: [currPage, settingredo, settingundo]",{"range":"88","text":"89"},"Update the dependencies array to be: [canvas, currPage, drawingStatus, flag]",{"range":"90","text":"91"},[2053,2055],"[canvas, ctx, undo]",[1081,1091],"[currPage, settingredo, settingundo]",[1719,1734],"[canvas, currPage, drawingStatus, flag]"]