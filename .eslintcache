[{"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\reportWebVitals.js":"1","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\App.js":"2","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\Components\\Main\\Main.js":"3","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\index.js":"4"},{"size":362,"mtime":1610716126631,"results":"5","hashOfConfig":"6"},{"size":118,"mtime":1610717690156,"results":"7","hashOfConfig":"6"},{"size":3845,"mtime":1610877256780,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1610716126631,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1rl9plu",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\reportWebVitals.js",[],["20","21"],"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\App.js",[],"C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\Components\\Main\\Main.js",["22","23","24"],"\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport  './style.css'\r\n\r\nconst Board = props => {\r\n    const Colors = ['black','blue','red','green','yellow']\r\n    let canvas,ctx,features1\r\n    const [drawing , setdrawing] = useState(false) \r\n    const [color ,setcolor] = useState('black')\r\n    const [inputlinewidth,setinputlinewidht]=useState('3')\r\n    const [linewidth,setlinewidth] = useState(2)\r\n    const fixHeight = (canvas) =>{\r\n        canvas.height = window.innerHeight-5;\r\n        canvas.width = window.innerWidth-5\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        features1 = document.getElementsByClassName(\"penciloptions\")[0].style;\r\n       \r\n        canvas = document.getElementsByClassName(\"canvas\")[0];\r\n        ctx  = canvas.getContext('2d')\r\n        \r\n        window.addEventListener('load',()=>{\r\n         fixHeight(canvas)\r\n        })\r\n        window.addEventListener('resize',()=>{\r\n            fixHeight(canvas)\r\n        })\r\n        \r\n    })\r\n    \r\n    const startDrawing = (e) => {\r\n        features1.display = \"none\"\r\n        setdrawing(true)\r\n        draw(e)\r\n       \r\n    }\r\n    const finishDrawing = () => {\r\n        setdrawing(false)\r\n        ctx.beginPath()\r\n    }\r\n    const draw = (e) => {\r\n    \r\n       if(!drawing) return;\r\n       ctx.lineWidth = linewidth\r\n       ctx.lineCap = 'round'\r\n       ctx.strokeStyle=color\r\n       ctx.lineTo(e.clientX,e.clientY)\r\n       ctx.stroke()\r\n       ctx.beginPath()\r\n       ctx.moveTo(e.clientX,e.clientY)\r\n    \r\n   }\r\n   const erase = (e) => {\r\n    document.getElementsByClassName(\"canvas\")[0].style.cursor = \"pointer\"\r\n    setcolor('white')\r\n    \r\n    setlinewidth(50)\r\n    \r\n    \r\n   }\r\n   const pencil = (e) => {\r\n    document.getElementsByClassName(\"canvas\")[0].style.cursor = \"crosshair\"\r\n    features1.display = \"flex\"\r\n  \r\n   \r\n   \r\n    \r\n    \r\n   }\r\n   const rectangle = () => {\r\n    ctx.beginPath();\r\n    ctx.lineWidth = \"6\";\r\n    ctx.strokeStyle = \"red\";\r\n    ctx.rect(500, 300, 290, 140);\r\n    ctx.stroke();\r\n    ctx.beginPath();\r\n   }\r\n\r\n   const chooseColor = (clr) => {\r\n       \r\n        setcolor(clr)\r\n        setlinewidth(inputlinewidth)\r\n        features1.display=\"none\"\r\n   } \r\n   const setline = (e) => {\r\n       setinputlinewidht(e.target.value)\r\n       setlinewidth(e.target.value)\r\n      \r\n   }\r\n\r\n\r\n    \r\n   \r\n    \r\n   \r\n    return(\r\n        \r\n         <div className='root'>\r\n            <div className = 'sidebar'>\r\n            <div className='sidebar'>\r\n                   <button className = 'eraser' onClick={erase}>\r\n                       Earser\r\n                   </button>\r\n                   <button className = 'eraser' onClick={pencil}>\r\n                      pencil\r\n                   </button>\r\n                   <button className = 'eraser' onClick={rectangle}>\r\n                      rectangle\r\n                   </button>\r\n\r\n               </div>\r\n               <div className=\"penciloptions\">\r\n                 <div>\r\n                 {Colors.map((clr)=>{\r\n                      return(\r\n                        <button key={clr} className = 'eraser' onClick={()=>chooseColor(clr)}>\r\n                        {clr}\r\n                     </button>\r\n                      )\r\n                  })}\r\n                 </div>\r\n                 <div>\r\n                     <input type=\"range\" min=\"1\" max = \"10\" defaultValue={linewidth} value={linewidth} onChange={setline}></input>\r\n                 </div>\r\n               </div>\r\n            </div>\r\n            \r\n            <div>\r\n\r\n            <canvas className=\"canvas\"\r\n            onMouseDown={startDrawing}\r\n            onMouseUp={finishDrawing}\r\n            onMouseMove={draw}\r\n            >  </canvas>\r\n            </div>\r\n                \r\n                \r\n\r\n              \r\n\r\n\r\n\r\n     </div>\r\n               \r\n               \r\n\r\n       \r\n    )\r\n}\r\n\r\nexport default Board","C:\\Users\\hp\\Desktop\\My Projs\\react projects\\whiteboard\\src\\index.js",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":19,"column":21,"nodeType":"31","endLine":19,"endColumn":78},{"ruleId":"29","severity":1,"message":"32","line":21,"column":18,"nodeType":"31","endLine":21,"endColumn":62},{"ruleId":"29","severity":1,"message":"33","line":22,"column":16,"nodeType":"34","endLine":22,"endColumn":39},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"react-hooks/exhaustive-deps","Assignments to the 'features1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'canvas' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'ctx' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation"]